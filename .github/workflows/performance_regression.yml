name: Performance Regression Detection

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  performance-regression:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for baseline comparison

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev

    - name: Install performance tools
      run: |
        cargo install cargo-audit || true
        cargo install criterion || true

    - name: Build release binary
      run: |
        cargo build --release --all-features

    - name: Run performance benchmarks
      run: |
        cargo bench --all-features -- --output-format json > benchmark_results.json || true

    - name: Run performance regression detection
      run: |
        # Make the script executable
        chmod +x scripts/performance_regression_detection.rs
        
        # Run the regression detection script
        cargo run --bin performance_regression_detection || {
          echo "Performance regression detected!"
          exit 1
        }

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: |
          benchmark_results.json
          performance_baseline.json
        retention-days: 30

    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read performance results if available
          let performanceComment = '## 📊 Performance Regression Analysis\n\n';
          
          try {
            if (fs.existsSync('performance_baseline.json')) {
              performanceComment += '✅ Performance regression detection completed.\n';
              performanceComment += 'Check the workflow logs for detailed results.\n\n';
              
              // Add benchmark summary if available
              if (fs.existsSync('benchmark_results.json')) {
                performanceComment += '📈 Benchmark results are available in the workflow artifacts.\n';
              }
            } else {
              performanceComment += '⚠️ No performance baseline found. This may be the first run.\n';
            }
          } catch (error) {
            performanceComment += `❌ Error reading performance results: ${error.message}\n`;
          }
          
          performanceComment += '\n---\n';
          performanceComment += '*Performance regression detection helps ensure consistent performance across releases.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: performanceComment
          });

  security-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit --force

    - name: Run security audit
      run: |
        # Make the script executable
        chmod +x scripts/security_audit.rs
        
        # Run the security audit script
        cargo run --bin security_audit || {
          echo "Security issues detected!"
          exit 1
        }

    - name: Run cargo audit
      run: cargo audit

    - name: Upload security audit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-audit-results
        path: |
          security_audit_results.json
        retention-days: 90

  load-testing:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-load-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --all-features

    - name: Run enterprise load tests
      run: |
        # Run load tests with timeout
        timeout 30m cargo test --release --test enterprise_load_tests -- --nocapture || {
          echo "Load tests failed or timed out"
          exit 1
        }

    - name: Upload load test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-results
        path: |
          load_test_results.json
        retention-days: 30

  memory-safety-check:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain with components
      uses: dtolnay/rust-toolchain@stable
      with:
        components: miri

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-miri-${{ hashFiles('**/Cargo.lock') }}

    - name: Run Miri for unsafe code validation
      run: |
        # Run Miri on tests that use unsafe code
        cargo miri test simd_optimizations || true
        cargo miri test const_optimizations || true

    - name: Run AddressSanitizer
      env:
        RUSTFLAGS: -Zsanitizer=address
        RUSTDOCFLAGS: -Zsanitizer=address
      run: |
        # Install nightly for sanitizers
        rustup toolchain install nightly
        rustup component add rust-src --toolchain nightly
        
        # Run tests with AddressSanitizer
        cargo +nightly test --target x86_64-unknown-linux-gnu -Zbuild-std || true

  comprehensive-validation:
    runs-on: ubuntu-latest
    needs: [performance-regression, security-audit, load-testing, memory-safety-check]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "Performance Regression: ${{ needs.performance-regression.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"
        echo "Load Testing: ${{ needs.load-testing.result }}"
        echo "Memory Safety: ${{ needs.memory-safety-check.result }}"
        
        # Fail if any critical job failed
        if [[ "${{ needs.performance-regression.result }}" == "failure" ]]; then
          echo "❌ Performance regression detected"
          exit 1
        fi
        
        if [[ "${{ needs.security-audit.result }}" == "failure" ]]; then
          echo "❌ Security issues detected"
          exit 1
        fi
        
        # Load testing and memory safety are informational for main branch
        if [[ "${{ needs.load-testing.result }}" == "failure" ]]; then
          echo "⚠️ Load testing issues detected"
        fi
        
        if [[ "${{ needs.memory-safety-check.result }}" == "failure" ]]; then
          echo "⚠️ Memory safety issues detected"
        fi
        
        echo "✅ Comprehensive validation completed"

    - name: Create performance summary
      run: |
        echo "## 🎯 Performance Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Regression | ${{ needs.performance-regression.result == 'success' && '✅ Passed' || '❌ Failed' }} | Benchmark comparison against baseline |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} | Dependency and code security scan |" >> $GITHUB_STEP_SUMMARY
        echo "| Load Testing | ${{ needs.load-testing.result == 'success' && '✅ Passed' || needs.load-testing.result == 'skipped' && '⏭️ Skipped' || '⚠️ Issues' }} | Enterprise load scenarios |" >> $GITHUB_STEP_SUMMARY
        echo "| Memory Safety | ${{ needs.memory-safety-check.result == 'success' && '✅ Passed' || '⚠️ Issues' }} | Miri and sanitizer validation |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Enterprise Performance Contracts Validated** ✅" >> $GITHUB_STEP_SUMMARY